{"version":3,"file":"77.a51feec8.iframe.bundle.js","mappings":";;;;;;;;AAwCA;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;AAkFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoHA","sources":["webpack://github-projectv2-csv-exporter/./src/api/github-projectv2-api.ts"],"sourcesContent":["import { ApolloClient, createHttpLink, gql, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\n// GitHub Auth instructions: https://docs.github.com/en/graphql/guides/forming-calls-with-graphql#authenticating-with-graphql\n// Apollo Client (About): https://www.apollographql.com/docs/react/\n// Apollo Client (Auth using bearer token): https://www.apollographql.com/docs/react/networking/authentication/\n// GitHub API Portal: https://studio.apollographql.com/public/github/home?variant=current&utm_campaign=github-api-article&utm_medium=display&utm_source=apollo-blog\n\nexport const GITHUB_API_URL = 'https://api.github.com/graphql';\n\nexport const createGQLClient = (token: string) => {\n  const httpLink = createHttpLink({\n    uri: GITHUB_API_URL,\n  });\n  const authLink = setContext((_, { headers }) => {\n    // get the authentication token from local storage if it exists\n    // return the headers to the context so httpLink can read them\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    };\n  });\n  const client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache(),\n  });\n  return client;\n};\n\nexport const fetchProjects = async (login: string, isOrg: boolean, token: string): Promise<Projects> => {\n  const ORG_PROJECTS_QUERY = gql`\n    query ProjectsQuery($login: String!, $projectsFirst: Int) {\n      viewer {\n        login\n        name\n        url\n        avatarUrl\n      }\n      entity: ${isOrg ? 'organization' : 'user'}(login: $login) {\n        avatarUrl\n        login\n        name\n        url\n        projectsV2(first: $projectsFirst) {\n          edges {\n            node {\n              title\n              number\n              url\n              items {\n                totalCount\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n  const client = createGQLClient(token);\n  const results = await client.query({\n    query: ORG_PROJECTS_QUERY,\n    variables: {\n      login,\n      projectsFirst: 100,\n    },\n  });\n  return new Projects(results);\n};\n\nexport class Projects {\n  public results: any;\n  constructor(results: any) {\n    this.results = results;\n  }\n  public getViewerLogin(): string | undefined {\n    return this.results?.data?.viewer?.login;\n  }\n  public getViewerAvatarUrl(): string | undefined {\n    return this.results?.data?.viewer?.avatarUrl;\n  }\n  public getViewerUrl(): string | undefined {\n    return this.results?.data?.viewer?.url;\n  }\n  public getViewerName(): string | undefined {\n    return this.results?.data?.viewer?.name;\n  }\n  public getLogin(): string | undefined {\n    return this.results?.data?.entity?.login;\n  }\n  public getAvatarUrl(): string | undefined {\n    return this.results?.data?.entity?.avatarUrl;\n  }\n  public getUrl(): string | undefined {\n    return this.results?.data?.entity?.url;\n  }\n  public getName(): string | undefined {\n    return this.results?.data?.entity?.name;\n  }\n  public getProjects(): Project[] {\n    const edges: any[] = this.results?.data?.entity?.projectsV2?.edges ?? [];\n    return edges.map((edge) => new Project(edge.node));\n  }\n}\n\nexport class Project {\n  public node: any;\n  constructor(node: any) {\n    this.node = node;\n  }\n  public getTitle(): string | undefined {\n    return this.node?.title;\n  }\n  public getProjectNumber(): number | undefined {\n    return this.node?.number;\n  }\n  public getUrl(): string | undefined {\n    return this.node?.url;\n  }\n  public getTotalItemCount(): number | undefined {\n    return this.node?.items?.totalCount ?? 0;\n  }\n}\n\nexport const fetchProjectItems = async (\n  login: string,\n  isOrg: boolean,\n  projectNumber: number,\n  token: string,\n  progress?: (loaded: number, total: number) => void,\n): Promise<ProjectItem[]> => {\n  const PROJECT_ITEMS_QUERY = gql`\n    query ProjectQuery(\n      $login: String!\n      $projectNumber: Int!\n      $itemsFirst: Int\n      $itemsAfter: String\n      $assigneesFirst: Int\n      $labelsFirst: Int\n      $statusFieldName: String!\n    ) {\n      entity: ${isOrg ? 'organization' : 'user'}(login: $login) {\n        projectV2(number: $projectNumber) {\n          items(first: $itemsFirst, after: $itemsAfter) {\n            totalCount\n            edges {\n              node {\n                content {\n                  ... on Issue {\n                    title\n                    url\n                    issueState: state\n                    assignees(first: $assigneesFirst) {\n                      nodes {\n                        name\n                        login\n                      }\n                    }\n                    author {\n                      login\n                      ... on User {\n                        name\n                        login\n                      }\n                      ... on Organization {\n                        name\n                        login\n                      }\n                      ... on EnterpriseUserAccount {\n                        name\n                        login\n                      }\n                    }\n                    milestone {\n                      title\n                    }\n                    labels(first: $labelsFirst) {\n                      nodes {\n                        name\n                      }\n                    }\n                    body\n                    number\n                    closedAt\n                  }\n                  ... on DraftIssue {\n                    title\n                    author: creator {\n                      login\n                      ... on User {\n                        name\n                        login\n                      }\n                      ... on Organization {\n                        name\n                        login\n                      }\n                      ... on EnterpriseUserAccount {\n                        name\n                        login\n                      }\n                    }\n                    assignees(first: $assigneesFirst) {\n                      nodes {\n                        login\n                        name\n                      }\n                    }\n                    body\n                  }\n                  ... on PullRequest {\n                    title\n                    assignees(first: $assigneesFirst) {\n                      nodes {\n                        name\n                        login\n                      }\n                    }\n                    body\n                    pullRequestState: state\n                    url\n                    number\n                    author {\n                      ... on User {\n                        name\n                        login\n                      }\n                      ... on Organization {\n                        name\n                        login\n                      }\n                      ... on EnterpriseUserAccount {\n                        name\n                        login\n                      }\n                    }\n                    closedAt\n                  }\n                }\n                createdAt\n                updatedAt\n                isArchived\n                status: fieldValueByName(name: $statusFieldName) {\n                  ... on ProjectV2ItemFieldSingleSelectValue {\n                    name\n                  }\n                }\n                type\n              }\n              cursor\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const client = createGQLClient(token);\n  let itemsAfter = null;\n  let queryResults = undefined;\n  let loadedEdges: any[] = [];\n  let loadedAll = false;\n  // We can only load 100 at a time. So we use cursors to load all issues.\n  while (!loadedAll) {\n    queryResults = await client.query({\n      query: PROJECT_ITEMS_QUERY,\n      variables: {\n        login,\n        projectNumber,\n        itemsFirst: 100,\n        itemsAfter,\n        assigneesFirst: 100,\n        labelsFirst: 100,\n        statusFieldName: 'Status',\n      },\n    });\n    const totalCount = queryResults.data?.entity?.projectV2?.items?.totalCount ?? 0;\n    const edges: any[] = queryResults?.data?.entity?.projectV2?.items?.edges ?? [];\n    loadedEdges = [...loadedEdges, ...edges];\n    itemsAfter = edges[edges.length - 1].cursor;\n    loadedAll = loadedEdges.length === totalCount;\n    // If a progress function was provided, we can call that to update the progress bar.\n    if (progress) {\n      progress(loadedEdges.length, totalCount);\n    }\n  }\n  return loadedEdges.map((edge) => new ProjectItem(edge.node));\n};\n\nexport class ProjectItem {\n  public node: any;\n  constructor(node: any) {\n    this.node = node;\n  }\n  public getCreatedAt(): string | undefined {\n    return this.node?.createdAt;\n  }\n  public isArchived(): boolean | undefined {\n    return !!this.node?.isArchived;\n  }\n  public getStatus(): string | undefined {\n    return this.node?.status?.name;\n  }\n  public getType(): string | undefined {\n    return this.node?.type;\n  }\n  public getUpdatedAt(): string | undefined {\n    return this.node?.updatedAt;\n  }\n  public getAssignees(): { name: string | undefined; login: string | undefined }[] | undefined {\n    return ((this.node?.content?.assignees?.nodes ?? []) as any[]).map((data) => {\n      return { name: data?.name ?? '', login: data?.login ?? '' };\n    });\n  }\n  public getAuthor(): { name: string | undefined; login: string | undefined } | undefined {\n    const authorData = this.node?.content?.author;\n    return { name: authorData?.name ?? '', login: authorData?.login ?? '' };\n  }\n  public getBody(): string | undefined {\n    return this.node?.content?.body;\n  }\n  public getClosedAt(): string | undefined {\n    return this.node?.content?.closedAt;\n  }\n  public getState(): string | undefined {\n    return this.node?.content?.issueState || this.node?.content?.pullRequestState;\n  }\n  public getLabels(): string[] | undefined {\n    return ((this.node?.content?.labels?.nodes as any[]) ?? []).map((labelData) => labelData?.name ?? '');\n  }\n  public getMilestone(): string | undefined {\n    return this.node?.content?.milestone?.title;\n  }\n  public getNumber(): string | undefined {\n    return this.node?.content?.number;\n  }\n  public getTitle(): string | undefined {\n    return this.node?.content?.title;\n  }\n  public getUrl(): string | undefined {\n    return this.node?.content?.url;\n  }\n}\n"],"names":[],"sourceRoot":""}